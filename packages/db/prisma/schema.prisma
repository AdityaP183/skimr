generator client {
    provider = "prisma-client-js"
    output   = "../generated/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum Role {
    ADMIN
    CREATOR
}

enum Plan {
    FREE
    STARTER
    ULTIMATE
}

enum Status {
    PENDING
    SUCCESS
    FAILED
    CANCELED
}

// ---------- Authentication ----------

model User {
    id            String   @id @default(cuid())
    name          String
    email         String   @unique
    emailVerified Boolean  @default(false)
    image         String?
    role          Role     @default(CREATOR)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @default(now()) @updatedAt

    subscription Subscription?
    sessions     Session[]
    accounts     Account[]
    domains      Domain[]
    links        Link[]
    payments     Payment[]

    @@index([email])
    @@map("users")
}

model Session {
    id        String   @id @default(cuid())
    expiresAt DateTime
    token     String   @unique
    ipAddress String?
    userAgent String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Account {
    id                    String    @id @default(cuid())
    accountId             String
    providerId            String
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([providerId, accountId])
    @@map("accounts")
}

model Verification {
    id         String   @id @default(cuid())
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt

    @@map("verifications")
}

// ---------- Subscriptions & Payments ----------
model Subscription {
    id        String   @id @default(cuid())
    plan      Plan     @default(FREE)
    status    Status
    startDate DateTime
    endDate   DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    payments Payment[]

    @@map("subscriptions")
}

model Payment {
    id        String   @id @default(cuid())
    amount    Int
    currency  String
    status    Status
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    subscriptionId String
    subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

    userId String?
    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("payments")
}

// ---------- Main Logic ----------
model Domain {
    id        String   @id @default(cuid())
    name      String
    isCustom  Boolean
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    links  Link[]

    @@index([name, userId])
    @@map("domains")
}

model Link {
    id        String   @id @default(cuid())
    title     String
    slug      String   @unique
    targetUrl String
    active    Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    userId   String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    domainId String
    domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

    tags LinkTag[]

    @@index([slug])
    @@index([domainId])
    @@index([userId])
    @@map("links")
}

model Tag {
    id    String @id @default(cuid())
    title String @unique

    links LinkTag[]

    @@map("tags")
}

model LinkTag {
    id String @id @default(cuid())

    linkId String
    link   Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)

    tagId String
    tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([linkId, tagId])
    @@map("link_tags")
}
